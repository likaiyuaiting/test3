Description
有一棵点数为 N 的树，以点 1 为根，且树点有边权。然后有 M 个操作，分为三种：
操作 1 ：把某个节点 x 的点权增加 a 。
操作 2 ：把某个节点 x 为根的子树中所有点的点权都增加 a 。
操作 3 ：询问某个节点 x 到根的路径中所有点的点权和。
Input
第一行包含两个整数 N, M 。表示点数和操作数。接下来一行 N 个整数，表示树中节点的初始权值。接下来 N-1行每行三个正整数 fr, to ， 表示该树中存在一条边 (fr, to) 。再接下来 M 行，每行分别表示一次操作。其中第一个数表示该操作的种类之后接这个操作的参数（ x 或者 x a ） 。

Output
对于每个询问操作，输出该询问的答案。答案之间用换行隔开。

Sample Input
5 5
1 2 3 4 5
1 2
1 4
2 3
2 5
3 3
1 2 1
3 5
2 1 2
3 3

Sample Output
6
9 
解题思路

树链剖分。因为全是long long太丑了，就把long long全换回了int。。。

HINT：因为某两个神犇Duan2和zP1nG指出了我写的解题思路具有误导性，所以这里更正一下：
此题爆int，要开long long，题解代码中没有long long只是因为我觉得太丑了，所以AC之后又改回了int才发的这篇题解，也就是说，底下的代码必须把部分变量改成long long类型才能AC。
代码：
#include<cstdio>
#include<iostream>
#include<algorithm>
#include<cmath>
#include<cstring>
#include<string>
#include<cstdlib>
using namespace std;
struct ldx
{
    int x,y,sum,v;
}f[800005];
int hed[500005],nex[1000005],lb[1000005];
int dep[500005],fa[500005];
int son[500005],siz[500005];
int top[500005],pos[500005];
int s[500005],ss[500005];
int lx,ly,lc,opt,n,m,lo,T;
void add(int x,int y)
{
    lo++;
    nex[lo]=hed[x];
    hed[x]=lo;
    lb[lo]=y;
}
void dfs1(int x,int fi)
{ 
    dep[x]=dep[fi]+1;
    siz[x]=1;fa[x]=fi;
    for(int i=hed[x];i!=0;i=nex[i])
    if(lb[i]!=fi){
        dfs1(lb[i],x);
        siz[x]+=siz[lb[i]];
        if(siz[son[x]]<siz[lb[i]]) son[x]=lb[i];
    }   
}
void dfs2(int x,int tp)
{
    top[x]=tp;pos[x]=++T;
    if(son[x]==0) return ;
    dfs2(son[x],tp);
    for(int i=hed[x];i!=0;i=nex[i])
    if(lb[i]!=fa[x] && lb[i]!=son[x])
    dfs2(lb[i],lb[i]);
}
void js(int num,int a,int b)
{
    f[num].x=a;f[num].y=b;f[num].v=0;
    if(a==b) {f[num].sum=s[a];return ;}
    int mid=(a+b)>>1;
    js(num<<1,a,mid);
    js(num<<1|1,mid+1,b);
    f[num].sum=f[num<<1].sum+f[num<<1|1].sum;
}
void res(int num)
{
    if(f[num].x>=lx && f[num].y<=ly) 
    {
        f[num].v+=lc;
        return ;
    }

    f[num<<1].v+=f[num].v;
    f[num<<1|1].v+=f[num].v;
    f[num].v=f[num].sum=0;

    int mid=(f[num].x+f[num].y)>>1; 
    if(ly<=mid) res(num<<1);
    else if(lx>mid) res(num<<1|1);
    else {res(num<<1);res(num<<1|1);}

    f[num].sum+=f[num<<1].sum+f[num<<1].v*(f[num<<1].y-f[num<<1].x+1);
    f[num].sum+=f[num<<1|1].sum+f[num<<1|1].v*(f[num<<1|1].y-f[num<<1|1].x+1);
}
int ch(int num)
{
    if(f[num].x>=lx && f[num].y<=ly) return f[num].sum+f[num].v*(f[num].y-f[num].x+1);

    f[num<<1].v+=f[num].v;
    f[num<<1|1].v+=f[num].v;
    f[num].sum+=f[num].v*(f[num].y-f[num].x+1);
    f[num].v=0;

    int mid=(f[num].x+f[num].y)>>1; 
    if(ly<=mid) return ch(num<<1);
    else if(lx>mid) return ch(num<<1|1);
    else return ch(num<<1)+ch(num<<1|1);
}
int main()
{
    int a,b;
    scanf("%d%d",&n,&m);
    for(int i=1;i<=n;i++) scanf("%d",&ss[i]); 
    for(int i=1;i<n;i++)
    {
        scanf("%d%d",&a,&b);
        add(a,b);add(b,a);
    }
    dfs1(1,0);dfs2(1,1);
    for(int i=1;i<=n;i++) s[pos[i]]=ss[i];
    js(1,1,n);

    for(int i=1;i<=m;i++)
    {
        scanf("%d",&opt);
        if(opt==1)
        {
            scanf("%d%d",&a,&b);
            lx=ly=pos[a];lc=b;
            res(1);
        }
        if(opt==2)
        {
            scanf("%d%d",&a,&b);
            lx=pos[a];ly=pos[a]+siz[a]-1;
            lc=b;res(1);
        }
        if(opt==3) 
        {
            int ans=0;
            scanf("%d",&a);
            while(a!=0)
            {
                lx=pos[top[a]];
                ly=pos[a];
                ans+=ch(1);
                a=fa[top[a]];
            }
            printf("%d\n",ans);
        }
    }

    return 0;
}
