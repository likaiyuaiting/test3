#include<cstdio>
#include<algorithm>
#include<cmath>
#include<cstring>
#include<iostream>
#include<string>
#include<cstdlib>
using namespace std;
int ans;
struct ldx
{
    int key,yx;
    int siz,num;
    ldx *ch[2];
}*root=NULL;
void Rotate(ldx* &p,bool f)
{  
    ldx *t=p->ch[f^1];
    p->ch[f^1]=t->ch[f]; 
    t->ch[f]=p;

    p->siz=p->num;
    if(p->ch[0]!=NULL) p->siz+=p->ch[0]->siz;
    if(p->ch[1]!=NULL) p->siz+=p->ch[1]->siz;

    t->siz=t->num;
    if(t->ch[0]!=NULL) t->siz+=t->ch[0]->siz;
    if(t->ch[1]!=NULL) t->siz+=t->ch[1]->siz; 
    p=t; 
}

void Insert(ldx* &p,int x)
{
    if(p==NULL)
    {
        p=new ldx;
        p->key=x;p->yx=rand();
        p->num=p->siz=1;
        p->ch[0]=p->ch[1]=NULL;
        return ;
    }
    if(p->key==x) {++p->siz;++p->num;return ;}
    else if(p->key>x)
    {
        Insert(p->ch[0],x);
        if(p->ch[0]->yx<p->yx) Rotate(p,1);
        else ++p->siz;
    }
    else if(p->key<x)
    {
        Insert(p->ch[1],x);
        if(p->ch[1]->yx<p->yx) Rotate(p,0);
        else ++p->siz;
    }
}
void Del(ldx* &p,int x)
{
    if(p==NULL) return ;
    if(p->key==x) 
    {
        if(p->num>1) {--p->num;--p->siz;return ;}        
        else 
        {
            if(p->ch[0]==NULL) {p=p->ch[1];return ;}
            else if(p->ch[1]==NULL) {p=p->ch[0];return ;}
            else 
            {
                if(p->ch[0]->yx<p->ch[1]->yx) {Rotate(p,1);Del(p->ch[1],x);}
                else {Rotate(p,0);Del(p->ch[0],x);}
                --p->siz;
            }
        }
    }
    else 
    {
        if(p->key>x) Del(p->ch[0],x);
        else Del(p->ch[1],x);
        --p->siz;
    }
}

int Kth(ldx* &p,int x)
{
    int s=0;
    if(p->ch[0]!=NULL) s=p->ch[0]->siz;
    if(x<=s) return Kth(p->ch[0],x);
    else if(p->num+s>=x) return p->key;
    else return Kth(p->ch[1],x-p->num-s);
}

int Rank(ldx* p,int x)
{
    int s=0;
    if(p->ch[0]!=NULL) s=p->ch[0]->siz;
    if(p->key==x) return s+1;
    else if(p->key>x) return Rank(p->ch[0],x);
    else return Rank(p->ch[1],x)+s+p->num;
}


void Pre(ldx* p,int x)
{
    if(p==NULL) return ;
    if(p->key<x) {ans=p->key;Pre(p->ch[1],x);}
    else Pre(p->ch[0],x);
}
void Succ(ldx* p,int x)
{
    if(p==NULL) return ;
    if(p->key>x) {ans=p->key;Succ(p->ch[0],x);}
    else Succ(p->ch[1],x);
}
int main()
{    
    int n,opt,lx;
    scanf("%d",&n);
    for(int i=1;i<=n;i++)
    {
        scanf("%d%d",&opt,&lx);
        if(opt==1) Insert(root,lx);
        if(opt==2) Del(root,lx);
        if(opt==3) printf("%d\n",Rank(root,lx));
        if(opt==4) printf("%d\n",Kth(root,lx));
        if(opt==5) {Pre(root,lx);printf("%d\n",ans);}
        if(opt==6) {Succ(root,lx);printf("%d\n",ans);}
    }
    return 0;
        }
