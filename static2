
    普通函数

　　 这里的普通函数是为了与类的成员函数区别开来。函数在定义时默认是外部的，通过extren声明即可被其他源文件引用，static声明将函数的作用域限制在本翻译单元中，成为内部函数。static函数在内存中只有一份，普通函数在每个调用中维持一份拷贝。

　　可以总结为：static使得函数在内存中只有一份，并将函数作用域限制在当前源文件。

 

      另外，static有几个优点总被提起：

　　　　1. 避免了链接时与其他源文件中的变量命名引起冲突。

 　　　  2.对于c函数而言，static对函数进行了信息屏蔽，只给当前文件中其他函数使用。

 

    类static成员

　　static声明对类成员的作用可以这样概括：static使得成员从“属于类对象”变成了“属于类，而不属于类对象”。

　　对于数据成员：

　　　　1.static数据成员必须在类定义体的外部进行定义。

1 class BOOK
2 {
3     private:
4         //折扣
5         static float discount;
6 };
7 //在类定义体外部定义并初始化
8 float BOOK::discount = 0.95f;

2.不像普通数据成员，static数据成员不能在构造函数中进行初始化。正如上面所说，它只能在类外部定义并初始化。然而有一个例外，整型的const static 数据成员可以在类的定义体中进行初始化。但需注意的是，const static数据成员在类的定义体中初始化时，该数据成员仍必须在类的定义体之外进行定义（不必再指定初始值了）。

1 class BOOK
2 {
3     private:
4         //折扣
5         const static  int  discount=1;
6 };
7 const  int BOOK::discount;

    类static成员函数

　　在类内部声明的static成员函数，在类定义体外部进行定义时无须重复指定static关键字。

　　对于static成员函数，它同样是不属于类对象的，因而它没有this指针。它可以直接访问类的static数据成员，不能直接使用非static成员，原因是非static数据成员属于类对象，使用非static数据成员时必须通过this指针来确定是这些成员属于哪个类对象，然而上面说了，static成员函数没有this指针。

　　static成员函数不能被声明为const。实际上，成员函数被声明为const的本质是它向编译器保证不会通过这个函数来修改类对象在内存中的每一个bit的内容（可以看《effective C++》 条款03 “尽可能使用const” ），然而我们知道，static成员函数并不属于类对象，更谈不上要保证不修改某一对象的内存了。

　　另外，虚函数不能为声明为static，为什么呢？原因还是static成员函数没有this指针。virtual funtion运行时绑定是多态的基础，没有this指针多态的概念无法践行。　
