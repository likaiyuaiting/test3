矩阵打印

    题目：输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字。

    例如：如果输入如下矩阵：

    1 2 3 4 5 6
    7 8 9 10 11 12 13
    14 15 16

    则依次打印出数字1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5, 6, 7, 11, 10。

一看题目很简单，上手发现其实循环很乱。看了 其他人的做法，大多都是记录循环的圈数，然后每次右行、下行、左行、上行。但缺点在于 若出现只剩下一行或一列的情况，处理较复杂。

本题采取记录最外圈四个角的位置方法，
当满足左右间距大于1，上下间距大于1时，每次剥下一圈，将四个角都往内移一位，再判断是否满足条件；
当不满足上述条件时，判断是一行或者一列或者单独一个元素，将该行、该列、该元素加入List。
代码如下：
import java.util.ArrayList;
public class Solution {
    public ArrayList<Integer> printMatrix(int [][] matrix) {
        int left=0,right=matrix[0].length-1,top=0,boom= matrix.length-1;//记录四个角的位置
        ArrayList<Integer> list = new ArrayList<Integer>();

        while((right>left)&&(boom>top)){
            for(int i=left;i<=right;i++){//从左到右
                list.add(matrix[top][i]);
            }
            for(int i=top+1;i<=boom;i++){//上到下
                list.add(matrix[i][right]);
            }
            for(int i = right-1;i>=left;i--){//右到左
                list.add(matrix[boom][i]);
            }
            for(int i = boom-1;i>top;i--){//下到上
                list.add(matrix[i][left]);
            }
            left++;
            right--;
            top++;
            boom--;
        }

        if((boom==top)&&(left<right)){//单独剩下一行的情况
            for(int i=left;i<=right;i++){
                list.add(matrix[top][i]);
            }
        }
        if((left==right)&&(boom>top)){//单独剩下一列的情况
            for(int i =top;i<= boom;i++){
                list.add(matrix[i][left]);
            }
        }
         if((boom==top)&&(right==left)){//单独剩下一个元素的情况
           list.add(matrix[left][boom]); 
        }
        return list;
    }
    }
